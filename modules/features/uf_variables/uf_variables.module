<?php
/**
 * @file
 * Code for the Variables feature.
 */

include_once 'uf_variables.features.inc';

/*
 * Implements hook_install_postinstall()
 *
 * Allows us to set the site_name after it has been overridden
 */
function uf_variables_install_postinstall() {
  // Set some views settings for better a dev experience.
  variable_set('views_ui_always_live_preview', 0);
  variable_set('views_ui_show_master_display', 1);

  // Set system info variables.
  variable_set('site_name', 'Unicorn Factory');
  variable_set('site_frontpage', 'projects-timeline');
  variable_set('site_mail', 'no-reply@myplanetdigital.com');

  // Set default theme info.
  uf_set_default_theme_info();

  // Set gauth info.
  uf_set_gauth_info();

  // Set blank pages.
  uf_set_blank_pages();
}

/*
 * Implements hook_variables_install_terms()
 *
 * Allows us to populate a set of skills that loads on install
 */
function uf_variables_install_terms() {
  // Simply returning an array.
  return array(
    // FYI, the array key should be the machine name of the vocabulary. In
    // this case, it's tags.
    // Add in ascending alpha order.
    'skill' => array(
      'Angular',
      'Basketweaving',
      'CSS',
      'Drupal',
      'HTML',
      'JavaScript',
      'PHP',
      'Python',
      'Ruby',
    ),
    'project_status' => array(
      'Active',
      'Potential',
    ),
  );
}

/*
 * Implements hook_install_blocks()
 *
 * Allows us to setup blocks, for our theme.
 */
function uf_variables_install_blocks() {
  // Check for required module.
  if (!module_exists('uf_info')){
    return;
  }

  // Get our blocks.
  $blocks = uf_info_block_info();

  // Get the default theme for better setup.
  $theme = variable_get('theme_default');

  foreach ($blocks as $delta => $block) {
    // Remove the 'info' since the table record names don't line up.
    unset($blocks[$delta]['info']);

    // Set block info.
    $blocks[$delta]['module'] = 'uf_info';
    $blocks[$delta]['theme'] = $theme;
    $blocks[$delta]['delta'] = $delta;
  }

  // Simply returning an array.
  return $blocks;
}

/**
 * Sets default theme info.
 */
function uf_set_default_theme_info() {
  // Set theme settings.
  $enable = array(
    'theme_default' => 'unicorn',
    'admin_theme' => 'seven',
    );

  theme_enable($enable);

  foreach($enable as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  // Disable the default Bartik theme
  theme_disable(array('bartik'));
}

/**
 * Sets google auth info.
 */
function uf_set_gauth_info() {
  // Check for required module.
  if (!module_exists('gauth')) {
    return;
  }

  // Set the gauth variables
  $client_id = variable_get('gauth_login_client_id', FALSE);
  $client_secret = variable_get('gauth_login_client_secret', FALSE);
  $developer_key = variable_get('gauth_login_developer_key', FALSE);

  // Set the DBQuery Function
  if ($client_id && $client_secret && $developer_key) {
    $query_string = "INSERT INTO {gauth_user_services} (`id`, `name`, `developer_key`, `client_id`, `client_secret`, `services`)
      VALUES ('unicorn_factory', 'Unicorn Factory', :dev_key, :client_id, :client_secret, 'oauth2')";

    $query_values = array();
    $query_values[':dev_key'] = $developer_key;
    $query_values[':client_id'] = $client_id;
    $query_values[':client_secret'] = $client_secret;

    db_query($query_string, $query_values);
  }
}

/**
 * Sets up blank pages.
 */
function uf_set_blank_pages() {
  // Check for required module.
  if (!module_exists('empty_page')) {
    return;
  }

  // Array of page paths and titles.
  $pages = array(
    'projects' => 'Projects',
    'projects-timeline' => 'Projects Timeline',
    'teams' => 'Teams',
    'users' => 'All Users',
  );

  // Run the query to set these up.
  foreach ($pages as $path => $title) {
    // Set string.
    $query_string = "INSERT INTO {empty_page} (`path`, `page_title`) VALUES (:path, :page_title)";

    // Set vars.
    $query_values = array();
    $query_values['path'] = $path;
    $query_values['page_title'] = $title;

    // Run query.
    db_query($query_string, $query_values);
  }

  // Rebuild menu paths.
  menu_rebuild();
}

/*
 * Implements hook_queries()
 */
function uf_variables_queries() {
  // Init a query array.
  $queries = array();

  foreach (uf_variables_block_roles() as $block) {
  // If we're doing an insert, it's generally a good idea to make sure that
    // the block doesn't already exist. This is a way to check.
    $check = db_select('block_role', 'br')
      ->fields('br')
      ->condition('module', $block['module'], '=')
      ->condition('delta', $block['delta'], '=')
      ->condition('rid', $block['rid'], '=')
      ->execute()
      ->fetchAssoc();

    // If the block doesn't already exist, create the insert query.
    if (empty($check)) {
      // Add the insert query.
      $queries[$block['delta']] = db_insert('block_role')
        ->fields(array(
          'module' => $block['module'],
          'delta' => $block['delta'],
          'rid' => $block['rid'],
        ));
    }
  }

  return $queries;
}

/**
 * Array definition of blocks to setup.
 */
function uf_variables_block_roles() {
  $blocks = array();

  // Projects timeline.
  $blocks['uf_projects_timeline'] = array(
    'module' => 'uf_info',
    'delta' => 'uf_projects_timeline',
    'rid' => 2,
  );

  // Projects timeline.
  $blocks['login'] = array(
    'module' => 'user',
    'delta' => 'login',
    'rid' => 1,
  );

  return $blocks;
}
